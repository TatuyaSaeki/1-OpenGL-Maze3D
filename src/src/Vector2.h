#pragma once

struct Vector2
{
	Vector2(void) {}

	Vector2(f32 x, f32 y)
		: _x(x)
		, _y(y)
	{}

	Vector2(f32 v)
		: _x(v)
		, _y(v)
	{}

	Vector2(const Vector2& v)
		: _x(v._x)
		, _y(v._y)
	{}

	//---------------------------------------------------------------------------
	//!	代入
	//---------------------------------------------------------------------------
	Vector2&	Vector2::operator = (const Vector2& v)
	{
		_x = v._x;
		_y = v._y;

		return *this;
	}

	//---------------------------------------------------------------------------
	// 加算
	//---------------------------------------------------------------------------
	Vector2	Vector2::operator + (const Vector2& v) const
	{
		Vector2		result;
		result._x = _x + v._x;
		result._y = _y + v._y;

		return result;
	}

	//---------------------------------------------------------------------------
	// 減算
	//---------------------------------------------------------------------------
	Vector2 Vector2::operator - (const Vector2& v) const
	{
		Vector2		result;
		result._x = _x - v._x;
		result._y = _y - v._y;

		return result;
	}

	//---------------------------------------------------------------------------
	// 乗算
	//---------------------------------------------------------------------------
	Vector2	Vector2::operator * (const Vector2& v) const
	{
		Vector2		result;
		result._x = _x * v._x;
		result._y = _y * v._y;

		return result;
	}

	//---------------------------------------------------------------------------
	// スケーリング
	//---------------------------------------------------------------------------
	Vector2 Vector2::operator * (f32 scale) const
	{
		Vector2		result;
		result._x = _x * scale;
		result._y = _y * scale;

		return result;
	}

	//---------------------------------------------------------------------------
	// スケーリング
	//---------------------------------------------------------------------------
	Vector2 Vector2::operator / (f32 scale) const
	{
		Vector2		result;
		f32		invScale = 1.0f / scale;
		result._x = _x * invScale;
		result._y = _y * invScale;

		return result;
	}

	//---------------------------------------------------------------------------
	// 加算
	//---------------------------------------------------------------------------
	Vector2&	Vector2::operator += (const Vector2& v)
	{
		_x += v._x;
		_y += v._y;

		return *this;
	}

	//---------------------------------------------------------------------------
	// 減算
	//---------------------------------------------------------------------------
	Vector2& Vector2::operator -= (const Vector2& v)
	{
		_x -= v._x;
		_y -= v._y;
		return *this;
	}

	//---------------------------------------------------------------------------
	// スケーリング
	//---------------------------------------------------------------------------
	Vector2& Vector2::operator *= (f32 scale)
	{
		_x *= scale;
		_y *= scale;

		return *this;
	}

	//---------------------------------------------------------------------------
	// スケーリング
	//---------------------------------------------------------------------------
	Vector2& Vector2::operator /= (f32 scale)
	{
		f32		invScale = 1.0f / scale;

		return operator *= (invScale);
	}


	f32 _x;
	f32 _y;
};
